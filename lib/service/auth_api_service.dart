import 'package:firebase_auth/firebase_auth.dart';
import 'package:spike_monster/model/account.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:google_sign_in/google_sign_in.dart';

class AuthApiService {
  AuthApiService._();
  static AuthApiService? _instance;

  static AuthApiService get instance {
    _instance ??= AuthApiService._();
    return _instance!;
  }


  final _auth = FirebaseAuth.instance;
  final _googleSignIn = GoogleSignIn();
  final _fireStore = FirebaseFirestore.instance;

  Future<void> createAnAccountWithEmail({required Account account}) async {
    //TODO: it should stop before enter create button
    if (account.password.length <= 6) {
      throw Exception('Register fail, password length most greater than 6');
    }
    final user = _auth.createUserWithEmailAndPassword(
      email: account.email,
      password: account.password,
    );
    account.id = await _generateUserId();

    //TODO: this should generated by freezed pack.
    _fireStore.collection('users').add({
      'id': account.id,
      'name': account.name,
      'email': account.email,
      'record': account.record,
    });
  }

  Future<void> loginWithEmail({required email, required password}) async {
    try {
      _auth.signInWithEmailAndPassword(email: email, password: password);
    } catch (e) {
      throw Exception(e);
    }
  }

  Future<void> updateUserAccount({required id, userName}) async {}

  Future<Account> getAccountDetail() async {
    final users = await _fireStore.collection('users').get();
    for (var user in users.docs) {
      if (_auth.currentUser!.email == user.get('email')) {
        return Account(
          name: user.get('name'),
          email: user.get('email'),
          id: user.get('id'),
          password: '',
          record: user.get('record'),
        );
      }
    }
    throw Exception('User not found !');
  }

  Future<String> _generateUserId() async {
    var userCounts = await _fireStore.collection('/user_count').get();
    int userCount = userCounts.docs.first.get('total_users');
    userCount++;
    // TODO: find the method to refactor this hard code.
    await _fireStore
        .collection('/user_count')
        .doc('SXTthuGydN3Z2XfL0OBg')
        .update({
      'total_users': userCount,
    });
    return userCount.toString().padLeft(6, '0');
  }

  Future<UserCredential> signInWithGoogle() async {
    final GoogleSignInAccount? _user = await GoogleSignIn().signIn();
    final GoogleSignInAuthentication _googleAuth = await _user!.authentication;

    final credential = GoogleAuthProvider.credential(
      accessToken: _googleAuth.accessToken,
      idToken: _googleAuth.idToken,
    );
    return await _auth.signInWithCredential(credential);
  }
}
